
# Notify the frontend that we are starting the build
wget ${startPingUrl}/$(date -u +%Y-%m-%dT%H:%M:%SZ) || true

# Get the platform, the R package uses this to determine
# the packages needed
export RHUB_PLATFORM=$(docker run --user docker \
			      --rm rhub/${image} \
			      bash -c 'echo $RHUB_PLATFORM')

# Look up system requirements
# wget https://raw.githubusercontent.com/MangoTheCat/remotes/master/install-github.R
# R -e "source(\"install-github.R\")\$value(\"r-hub/sysreqs\")"

echo ">>>>>==================== Downloading and unpacking package file"

wget -O "$package" "$url"
DESC=$(tar tzf "$package" | grep "^[^/]*/DESCRIPTION$")
tar xzf "$package" "$DESC"

echo ">>>>>==================== Querying system requirements"

sysreqs=$(Rscript -e "library(sysreqs); cat(sysreq_commands(\"$DESC\"))")
rm -rf "$package" "$DESC"

echo ">>>>>==================== Installing system requirements"

# Install them, if there is anything to install
if [ ! -z "${sysreqs}" ]; then
    echo "${sysreqs}" > sysreqs.sh
    docker run -d --user root --name ${JOB_BASE_NAME}-1 \
	   -v $(pwd)/sysreqs.sh:/root/sysreqs.sh \
	   rhub/${image} bash /root/sysreqs.sh
    # Wait until it stops
    docker attach ${JOB_BASE_NAME}-1 || true
    # Save the container as an image
    newimage=$(docker commit ${JOB_BASE_NAME}-1)
else
    # If there is nothing to install we just use the stock image
    newimage=rhub/${image}
fi

# Run the build in the new image

env=$(tempfile)
echo url=$url >> $env
echo package=$package >> $env
echo checkArgs=$checkArgs >> $env
echo "$envVars" >> $env

echo ">>>>>==================== Starting Docker container"

docker run -i --user docker --env-file $env \
       --name ${JOB_BASE_NAME}-2 $newimage /bin/bash -l <<'EOF'
## The default might not be the home directory, but /
cd ~

## Configure R, local package library, and also CRAN and BioConductor
export PATH=$(ls /opt/R-* -d)/bin:$PATH
if [[ -z "$RBINARY" ]]; then RBINARY="R"; fi
export R_LIBS=~/R
mkdir -p ~/R
echo "options(repos = c(CRAN = \"http://jenkins.iotwjus4p5merbek114fbzbqud.dx.internal.cloudapp.net/\"))" >> ~/.Rprofile
$RBINARY -e "source('https://bioconductor.org/biocLite.R')"
echo "options(repos = BiocInstaller::biocinstallRepos())" >> ~/.Rprofile
echo "unloadNamespace('BiocInstaller')" >> ~/.Rprofile

if [[ "${RHUB_BINARIES}" == "yes" ]]; then
  echo "options(repos = c(RHUBBIN = 'https://cranbinaries.r-hub.io/linux/ubuntu16.04-R33x/', RHUB='http://jenkins.iotwjus4p5merbek114fbzbqud.dx.internal.cloudapp.net/', getOption('repos')))" >> ~/.Rprofile
fi

echo ">>>>>==================== Querying package dependencies"

## Download the single file install script from mangothecat/remotes
## We cannot do this from R, because some R versions do not support
## HTTPS. Then we install a proper 'remotes' package with it.
curl -O https://raw.githubusercontent.com/MangoTheCat/remotes/master/install-github.R
xvfb-run --server-args="-screen 0 1024x768x24" $RBINARY -e "source(\"install-github.R\")\$value(\"mangothecat/remotes\")"

## Download the submitted package
curl -L -o "$package" "$url"

echo ">>>>>==================== Installing package dependencies"

## Print configuration information for compilers
echo $PATH
$RBINARY CMD config CC
`$RBINARY CMD config CC` --version
$RBINARY CMD config CXX
`$RBINARY CMD config CXX` --version

echo Pandoc:
which pandoc
ls -l `which pandoc`
ls -l `which pandoc-citeproc`

## Install the package, so its dependencies will be installed
## This is a temporary solution, until remotes::install_deps works on a
## package bundle
xvfb-run --server-args="-screen 0 1024x768x24" $RBINARY -e "remotes::install_local(\"$package\", dependencies = TRUE, INSTALL_opts = \"--build\")"

## If installation fails, then we do not run the check at all
pkgname=$(echo $package | sed 's/_.*$//')
if ! $RBINARY -q -e "library($pkgname)"; then exit 1; fi

echo ">>>>>==================== Running R CMD check"

## We only override this if it was not set by the user
if [ -z "${_R_CHECK_FORCE_SUGGESTS_}" ]; then
    export _R_CHECK_FORCE_SUGGESTS_=false
fi

if [ -z "$RHUB_CHECK_COMMAND" ]; then
   RHUB_CHECK_COMMAND="$RBINARY CMD check $checkArgs"
fi

echo About to run xvfb-run $RHUB_CHECK_COMMAND $package
xvfb-run --server-args="-screen 0 1024x768x24" $RHUB_CHECK_COMMAND "$package"

echo ">>>>>==================== Done with R CMD check"

pkgname=$(echo $package | sed 's/_.*$//')
mkdir -p $pkgname.Rcheck || true
mv *.tar.gz $pkgname.Rcheck/ || true
EOF

echo ">>>>>==================== Saving artifacts"

# Save the artifacts
rm -rf ${JOB_BASE_NAME}
mkdir -p ${JOB_BASE_NAME}
docker cp "${JOB_BASE_NAME}-2:/home/docker/${pkgname}.Rcheck" \
       ${JOB_BASE_NAME}/
mv ${JOB_BASE_NAME}/${pkgname}.Rcheck/*.tar.gz \
   ${JOB_BASE_NAME}/ || true

# Destroy the new containers and the images
# Only if we needed system installs, but not the stock image
docker rm ${JOB_BASE_NAME}-1 || true
docker rm ${JOB_BASE_NAME}-2 || true
if ! echo $newimage | grep -q 'rhub'; then
    docker rmi $newimage || true
fi
